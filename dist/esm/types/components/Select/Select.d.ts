import React, { ReactElement } from 'react';
import { OptionType } from '../../types/select';
import './style.css';
declare const Select: React.ForwardRefExoticComponent<import("../../types").DefaultProps & {
    id?: string;
    searchValue?: string;
    onSearch?: (value: string) => void;
    autoClearSearchValue?: boolean;
    onSelect?: (value: import("../../types").RuleTypes, option?: OptionType) => void;
    onDeselect?: (value: string, option?: OptionType) => void;
    filterOption?: boolean | ((input: string, option: OptionType) => boolean);
    optionFilterProp?: string;
    options?: OptionType[];
    children?: React.ReactNode;
    defaultActiveFirstOption?: boolean;
    listHeight?: number;
    menuItemSelectedIcon?: React.ReactNode;
    mode?: "default" | "multiple" | "tags";
    value?: import("../../types").RuleTypes;
    defaultValue?: import("../../types").RuleTypes;
    maxCount?: number;
    onChange?: (e: import("../../types").RuleTypes, option?: OptionType) => void;
    disabled?: boolean;
    loading?: boolean;
    placeholder?: string;
    allowClear?: boolean;
    filterable?: boolean;
    defaultOpen?: boolean;
    size?: "small" | "middle" | "large";
    onClear?: () => void;
    error?: boolean;
    showSearch?: boolean;
    tagRender?: ((props: import("../../types/select").CustomTagProps) => ReactElement) | undefined;
    maxTagPlaceholder?: React.ReactNode | ((omittedValues: import("../../types/select").DisplayValueType[]) => React.ReactNode);
    dropdownClassName?: string;
    showArrow?: boolean;
    onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
    onDropdownVisibleChange?: ((open: boolean) => void) | undefined;
    showAction?: ("click" | "focus")[] | undefined;
    suffixIcon?: React.ReactNode;
    open?: boolean;
    notFoundContent?: React.ReactNode;
    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
    dropdownRender?: (menu: React.ReactNode) => React.ReactNode;
    feedbackIcons?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    removeIcon?: React.ReactNode;
} & React.RefAttributes<HTMLDivElement>> & {
    Option: React.FC<import("../../types/select").OptionProps>;
};
export default Select;
