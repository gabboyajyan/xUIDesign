import './styles/global.css';
declare const Button: import("react").ComponentType<import("@/types/button").ButtonProps>;
declare const Checkbox: import("react").ComponentType<import("@/types/checkbox").CheckboxProps>;
declare const Switch: import("react").ComponentType<import("./types/switch").SwitchProps>;
declare const Empty: import("react").ComponentType<import("./types/empty").EmptyContentProps>;
declare const Upload: import("react").ComponentType<import("@/types/upload").UploadProps>;
declare const DatePicker: import("react").ComponentType<import("@/types/datepicker").TDatePickerProps>;
declare const RangePicker: import("react").ComponentType<import("@/types/datepicker").TRangePickerProps>;
declare const TimePicker: import("react").ComponentType<import("@/types/datepicker").TimePickerProps>;
declare const Form: import("react").ComponentType<import("@/types/form").FormProps>;
declare const FormItem: import("react").ComponentType<import("@/types/form").FormItemProps>;
declare const Input: import("react").ComponentType<import("@/types/input").InputProps>;
declare const Textarea: import("react").ComponentType<import("@/types/input").TextareaProps>;
declare const Radio: import("react").ComponentType<import("@/types/radio").RadioProps>;
declare const RadioButton: import("react").ComponentType<import("@/types/radio").RadioButtonProps>;
declare const RadioGroup: import("react").ComponentType<import("@/types/radio").RadioGroupProps>;
declare const Select: import("react").ComponentType<import("@/types").DefaultProps & {
    id?: string;
    searchValue?: string;
    onSearch?: (value: string) => void;
    autoClearSearchValue?: boolean;
    onSelect?: (value: import("@/types").RuleTypes, option?: import("@/types/select").OptionType) => void;
    onDeselect?: (value: string, option?: import("@/types/select").OptionType) => void;
    filterOption?: boolean | ((input: string, option: import("@/types/select").OptionType) => boolean);
    optionFilterProp?: string;
    options?: import("@/types/select").OptionType[];
    children?: import("react").ReactNode;
    defaultActiveFirstOption?: boolean;
    listHeight?: number;
    menuItemSelectedIcon?: import("react").ReactNode;
    mode?: "default" | "multiple" | "tags";
    value?: import("@/types").RuleTypes;
    defaultValue?: import("@/types").RuleTypes;
    maxCount?: number;
    onChange?: (e: import("@/types").RuleTypes, option?: import("@/types/select").OptionType) => void;
    onClose?: () => void;
    disabled?: boolean;
    loading?: boolean;
    placeholder?: string;
    allowClear?: boolean;
    filterable?: boolean;
    defaultOpen?: boolean;
    size?: "small" | "middle" | "large";
    onClear?: () => void;
    error?: boolean;
    showSearch?: boolean;
    tagRender?: ((props: import("@/types/select").CustomTagProps) => import("react").ReactElement) | undefined;
    maxTagPlaceholder?: import("react").ReactNode | ((omittedValues: import("@/types/select").DisplayValueType[]) => import("react").ReactNode);
    dropdownClassName?: string;
    showArrow?: boolean;
    onBlur?: import("react").FocusEventHandler<HTMLElement> | undefined;
    onDropdownVisibleChange?: ((open: boolean, selected: import("@/types").RuleType) => void) | undefined;
    showAction?: ("click" | "focus")[] | undefined;
    suffixIcon?: import("react").ReactNode;
    searchIcon?: import("react").ReactNode;
    open?: boolean;
    notFoundContent?: import("react").ReactNode;
    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
    dropdownRender?: (menu: import("react").ReactNode) => import("react").ReactNode;
    feedbackIcons?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    removeIcon?: import("react").ReactNode;
    maxTagCount?: number | "responsive";
    ref?: import("react").ForwardedRef<HTMLDivElement>;
    closeFromParent?: boolean;
}>;
declare const Option: import("react").ComponentType<import("@/types/select").OptionProps>;
declare const Tag: import("react").ComponentType<import("@/types/select").CustomTagProps>;
declare const Skeleton: import("react").ComponentType<import("./types/skeleton").SkeletonProps>;
declare const SkeletonAvatar: import("react").ComponentType<import("./types/skeleton").SkeletonAvatarProps>;
declare const SkeletonButton: import("react").ComponentType<import("./types/skeleton").SkeletonButtonProps>;
declare const SkeletonImage: import("react").ComponentType<import("./types/skeleton").SkeletonImageProps>;
declare const SkeletonInput: import("react").ComponentType<import("./types/skeleton").SkeletonInputProps>;
export { Button, Checkbox, Empty, DatePicker, RangePicker, TimePicker, Form, FormItem, Input, Textarea, Radio, RadioButton, RadioGroup, Select, Option, Tag, Skeleton, SkeletonAvatar, SkeletonButton, SkeletonImage, SkeletonInput, Upload, Switch };
export { ClearIcon, ArrowIcon, LoadingIcon, CheckIcon, SearchIcon, CalendarIcon, SuccessIcon, ErrorIcon, DateDistanceIcon, TimeIcon, StampleIcon, TrashIcon, SpinerIcon, } from '@/components/Icons';
export { useForm } from '@/hooks/useForm';
export { useWatch } from '@/hooks/useWatch';
export type { FormInstance, RuleObject, RuleRender, FieldData, FieldInstancesInputRef, FieldError, FormProps, FormItemChildComponentProps } from '@/types/form';
export type { DefaultProps, TargetProps, RuleTypes, RuleType, MouseEventHandlerSelect, SyntheticBaseEvent } from '@/types';
export type { CheckboxProps } from '@/types/checkbox';
export type { InputProps, TextareaProps } from '@/types/input';
export type { ButtonProps, BaseButtonProps, ButtonType } from '@/types/button';
export type { RadioProps, RadioGroupProps, RadioButtonProps } from '@/types/radio';
export type { TDatePickerProps, TRangePickerProps, TimePickerProps } from '@/types/datepicker';
export type { SelectProps, OptionType, OptionProps, CustomTagProps, TagProps, DisplayValueType } from '@/types/select';
export type { RcFile, UploadFile, UploadProps, UploadChangeParam } from '@/types/upload';
export { FormContext } from '@/components/Form/Form';
export { clsx, createArray, parseValue } from '@/helpers';
export { flattenChildren } from '@/helpers/flatten';
