import './styles/global.css';
declare const Button: import("react").ComponentType<import("@/types/button").ButtonProps>;
declare const Checkbox: import("react").ComponentType<import("@/types").DefaultProps & {
    disabled?: boolean;
    onChange?: (e: import("react").MouseEvent<HTMLInputElement> & import("@/types").TargetProps) => void;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    value?: boolean;
    tabIndex?: number;
    name?: string;
    children?: import("react").ReactNode;
    id?: string;
    autoFocus?: boolean;
    type?: string;
    skipGroup?: boolean;
    required?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
} & import("react").RefAttributes<HTMLDivElement>>;
declare const Empty: import("react").ComponentType<import("./types/empty").EmptyContentProps>;
declare const Upload: import("react").ComponentType<import("./types/upload").UploadProps>;
declare const DatePicker: import("react").ComponentType<import("./types/datepicker").TDatePickerProps>;
declare const RangePicker: import("react").ComponentType<import("./types/datepicker").TRangePickerProps>;
declare const TimePicker: import("react").ComponentType<import("./types/datepicker").TimePickerProps>;
declare const Form: import("react").ComponentType<import("@/types/form").FormProps>;
declare const FormItem: import("react").ComponentType<import("@/types/form").FormItemProps>;
declare const Input: import("react").ComponentType<Omit<import("react").InputHTMLAttributes<HTMLInputElement>, "size" | "prefix"> & import("@/types").DefaultProps & {
    addonBefore?: import("react").ReactNode;
    addonAfter?: import("react").ReactNode;
    size?: import("@/types").SizeType;
    prefix?: import("react").ReactNode;
    suffix?: import("react").ReactNode;
    disabled?: boolean;
    allowClear?: boolean;
    error?: boolean;
    bordered?: boolean;
    iconRender?: (visible: boolean) => import("react").ReactElement;
    onChange?: (event: import("@/types").SyntheticBaseEvent) => void;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onPressEnter?: (event: import("react").KeyboardEvent<HTMLInputElement>) => void;
    feedbackIcons?: boolean;
} & import("react").RefAttributes<HTMLInputElement>>;
declare const Textarea: import("react").ComponentType<Omit<import("react").TextareaHTMLAttributes<HTMLTextAreaElement>, "onResize"> & import("@/types").DefaultProps & {
    value?: string;
    className?: string;
    style?: import("react").CSSProperties;
    autoSize?: boolean | {
        minRows?: number;
        maxRows?: number;
    };
    onPressEnter?: import("react").KeyboardEventHandler<HTMLTextAreaElement>;
    onResize?: (size: {
        width: number;
        height: number;
    }) => void;
    styles?: {
        textarea?: import("react").CSSProperties;
        count?: import("react").CSSProperties;
    };
    bordered?: boolean;
    size?: import("@/types").SizeType;
    status?: "success" | "error";
    rootClassName?: string;
    variant?: "outlined" | "borderless" | "filled" | "underlined";
    error?: boolean;
    allowClear?: boolean;
} & import("react").RefAttributes<HTMLTextAreaElement>>;
declare const Radio: import("react").ComponentType<import("@/types").DefaultProps & {
    defaultChecked?: boolean;
    checked?: boolean;
    disabled?: boolean;
    title?: string;
    onChange?: (e: import("@/types").SyntheticBaseEvent) => void;
    onClick?: import("react").MouseEventHandler<HTMLElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLElement>;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement>;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement>;
    value?: import("@/types").RuleType;
    tabIndex?: number;
    name?: string;
    children?: import("react").ReactNode;
    id?: string;
    autoFocus?: boolean;
    type?: string;
    skipGroup?: boolean;
    required?: boolean;
    button?: boolean;
    error?: boolean;
} & import("react").RefAttributes<HTMLLabelElement>>;
declare const RadioButton: import("react").ComponentType<import("./types/radio").RadioButtonProps>;
declare const RadioGroup: import("react").ComponentType<import("./types/radio").RadioGroupProps>;
declare const Select: import("react").ComponentType<import("@/types").DefaultProps & {
    id?: string;
    searchValue?: string;
    onSearch?: (value: string) => void;
    autoClearSearchValue?: boolean;
    onSelect?: (value: import("@/types").RuleTypes, option?: import("./types/select").OptionType) => void;
    onDeselect?: (value: string, option?: import("./types/select").OptionType) => void;
    filterOption?: boolean | ((input: string, option: import("./types/select").OptionType) => boolean);
    optionFilterProp?: string;
    options?: import("./types/select").OptionType[];
    children?: import("react").ReactNode;
    defaultActiveFirstOption?: boolean;
    listHeight?: number;
    menuItemSelectedIcon?: import("react").ReactNode;
    mode?: "default" | "multiple" | "tags";
    value?: import("@/types").RuleTypes;
    defaultValue?: import("@/types").RuleTypes;
    maxCount?: number;
    onChange?: (e: import("@/types").RuleTypes, option?: import("./types/select").OptionType) => void;
    disabled?: boolean;
    loading?: boolean;
    placeholder?: string;
    allowClear?: boolean;
    filterable?: boolean;
    defaultOpen?: boolean;
    size?: "small" | "middle" | "large";
    onClear?: () => void;
    error?: boolean;
    showSearch?: boolean;
    tagRender?: ((props: import("./types/select").CustomTagProps) => import("react").ReactElement) | undefined;
    maxTagPlaceholder?: import("react").ReactNode | ((omittedValues: import("./types/select").DisplayValueType[]) => import("react").ReactNode);
    dropdownClassName?: string;
    showArrow?: boolean;
    onBlur?: import("react").FocusEventHandler<HTMLElement> | undefined;
    onDropdownVisibleChange?: ((open: boolean) => void) | undefined;
    showAction?: ("click" | "focus")[] | undefined;
    suffixIcon?: import("react").ReactNode;
    open?: boolean;
    notFoundContent?: import("react").ReactNode;
    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
    dropdownRender?: (menu: import("react").ReactNode) => import("react").ReactNode;
    feedbackIcons?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    removeIcon?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLDivElement>>;
declare const Option: import("react").ComponentType<import("./types/select").OptionProps>;
declare const Tag: import("react").ComponentType<import("./types/select").CustomTagProps>;
declare const Skeleton: import("react").ComponentType<import("./types/skeleton").SkeletonProps>;
declare const SkeletonAvatar: import("react").ComponentType<import("./types/skeleton").SkeletonAvatarProps>;
declare const SkeletonButton: import("react").ComponentType<import("./types/skeleton").SkeletonButtonProps>;
declare const SkeletonImage: import("react").ComponentType<import("./types/skeleton").SkeletonImageProps>;
declare const SkeletonInput: import("react").ComponentType<import("./types/skeleton").SkeletonInputProps>;
export { Button, Checkbox, Empty, DatePicker, RangePicker, TimePicker, Form, FormItem, Input, Textarea, Radio, RadioButton, RadioGroup, Select, Option, Tag, Skeleton, SkeletonAvatar, SkeletonButton, SkeletonImage, SkeletonInput, Upload };
export { ClearIcon, ArrowIcon, LoadingIcon, CheckIcon, SearchIcon, CalendarIcon, SuccessIcon, ErrorIcon, DateDistanceIcon, TimeIcon, StampleIcon, TrashIcon, SpinerIcon, } from '@/components/Icons';
export { useForm } from '@/hooks/useForm';
export { useWatch } from '@/hooks/useWatch';
export type { FormInstance } from '@/types/form';
export type { ButtonProps } from '@/types/button';
export type { RuleTypes, RuleType } from '@/types';
export { clsx, createArray, parseValue } from '@/helpers';
